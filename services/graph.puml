@startuml
package .{

interface IBugService{
+Create(payload *BugRequest): *BugResponse, error
+GetAllByProjectId(projectID uint): *[]BugResponse, error
+GetAllByUserId(userID uint): *[]BugResponse, error
+Update(payload *BugRequest): *BugResponse, error
+AddComment(payload *BugCommentRequest): *BugCommentResponse, error
}
interface ICaseService{
+Create(payload *CaseRequest): *CaseResponse, error
+GetAllByProjectId(projectID uint): *[]CaseResponse, error
+GetAllBySuiteId(suiteID uint): *[]CaseResponse, error
}
interface IClientService{
+Create(payload *ProjectClientRequest): *ProjectClientResponse, error
}
interface IExecutionService{
+SaveTestExecution(payload *TestExecutionRequest): *TestExecution, error
+SaveSuiteExecution(suiteID uint): *SuiteExecution, error
}
interface IInvitationService{
+Create(c *Ctx, payload *InvitationRequest): *InvitationResponse, error
+Get(c *Ctx, id uint): *InvitationResponse, error
+Update(c *Ctx, id uint, payload *InvitationRequest): *InvitationResponse, error
}
interface IPostService{
+Create(payload *PostRequest): *PostResponse, error
+GetAllByProjectId(projectID uint): *[]PostResponse, error
+GetAllByUserId(userID uint): *[]PostResponse, error
+Update(payload *PostRequest): *PostResponse, error
}
interface IProjectService{
+Join(c *Ctx, payload *JoinProject)
+Create(payload *ProjectResponse): *ProjectResponse, error
+GetAll(userId string): *[]ProjectResponse, error
+SaveProjectImage(projectID uint, fileBytes []byte): error
}
interface ISuiteService{
+Create(payload *SuiteRequest): *SuiteResponse, error
+GetAll(projectId string): *[]SuiteResponse, error
}
interface IUserService{
+GetAll(): *[]UserResponse, error
+GetById(id int64): *UserResponse, error
+Create(user SignUpInput): *UserResponse, error
+UpdateRole(roles Role): *UserResponse, error
}
class BugService {
+BugProvider: BugProvider
+UserProvider: UserProvider
+EmailService: *EmailService
+Create(payload *BugRequest): *BugResponse, error
+GetAllByProjectId(projectID string): *[]BugResponse, error
+GetAllByUserId(userId string, status string): *[]BugResponse, error
+Update(payload *BugRequest): *BugResponse, error
+SaveFiles(bugId uint, files [][]byte): error
+AddComment(payload *BugCommentRequest): *BugResponse, error
}
class CaseService {
+CaseProvider: CaseProvider
+Create(payload *CaseRequest): *CaseResponse, error
+SaveFiles(caseId uint, files [][]byte): error
+GetById(id string): *CaseResponse, error
+GetAllByProjectId(id string): *[]CaseResponse, error
+GetAllByUserId(id string): *[]CaseResponse, error
}
class ClientService {
+ClientProvider: ClientProvider
+Create(payload *ProjectClientRequest): *ProjectClientResponse, error
+GetAll(userId string): *[]ProjectClientResponse, error
}
class ExecutionService {
+ExecutionProvider: IExecutionProvider
+EmailService: *EmailService
+SaveTestExecution(payload *TestExecutionRequest): *TestExecution, error
+SaveSuiteExecution(suiteID uint): *SuiteExecution, error
}
class InvitationService {
+InvitationProvider: InvitationProvider
+ProjectProvider: ProjectProvider
+UserProvider: UserProvider
+MessagingProvider: MessagingProvider
+EmailService: *EmailService
+Create(c *Ctx, payload *InvitationRequest): *InvitationResponse, error
+GetAllByInvitedId(c *Ctx, invitedId uint): *[]*InvitationResponse, error
+Update(c *Ctx, id uint): *InvitationResponse, error
}
class Messaging {
+MessagingProvider: MessagingProvider
+SendToToken(token string)
}
class PostService {
+PostProvider: PostProvider
+UserProvider: UserProvider
+EmailService: *EmailService
+Create(payload *PostRequest): *PostResponse, error
+GetAllByProjectId(projectID string): *[]PostResponse, error
}
class ProjectService {
+ProjectProvider: ProjectProvider
+UserProvider: UserProvider
+EmailService: *EmailService
+SaveProjectImage(projectID uint, fileBytes []byte): error
+Create(payload *ProjectRequest): *ProjectResponse, error
+Join(c *Ctx, payload *JoinProject): *ProjectResponse, error
+GetAll(userId string): *[]ProjectResponse, error
+Get(id uint): *ProjectResponse, error
}
class SuiteService {
+SuiteProvider: SuiteProvider
+Create(payload *SuiteRequest): *SuiteResponse, error
+GetAll(projectId string): *[]SuiteResponse, error
}
class UserService {
+UserProvider: UserProvider
+GetAll(): *[]UserResponse, error
+GetAllByProject(projectId uint): *[]UserResponse, error
+GetById(id uint): *UserResponse, error
+GetByUsername(username string): *UserResponse, error
+Create(c *Ctx, payload *SignUpInput): *UserResponse, error
+UpdateRole(id uint, roles []Role): *UserResponse, error
+UpdateFcmToken(id uint, token string): error
}
}

"ClientService" --|> "IClientService"
"ExecutionService" --|> "IExecutionService"
"SuiteService" --|> "ISuiteService"
@enduml